name: Release to PyPI

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.8"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.9"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.10"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.11"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.12"
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            python-version: "3.8"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.9"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.10"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.11"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.12"
            target: aarch64-apple-darwin
          - os: windows-latest
            python-version: "3.8"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.9"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.10"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.11"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.12"
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install maturin
        run: pip install maturin

      - name: Clean target directory (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "target/wheels") { Remove-Item -Recurse -Force "target/wheels" }
        shell: pwsh

      - name: Clean target directory (Unix)
        if: runner.os != 'Windows'
        run: rm -rf target/wheels/*.whl
        shell: bash

      - name: Build wheel
        run: maturin build --release -i python --target ${{ matrix.target }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.target }}
          path: target/wheels/*.whl
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheel-*

      - name: List downloaded wheels
        run: |
          echo "Downloaded wheels:"
          find dist/ -name "*.whl" -type f | sort

      - name: Organize wheels for PyPI
        run: |
          # Create a clean dist directory
          mkdir -p dist_clean
          # Copy all wheels to dist_clean with proper names
          find dist/ -name "*.whl" -type f -exec cp {} dist_clean/ \;
          # Remove the old dist directory and rename
          rm -rf dist
          mv dist_clean dist
          echo "Final wheels for PyPI:"
          ls -la dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install twine
        run: pip install twine

      - name: Check wheels
        run: |
          twine check dist/*.whl

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl
          generate_release_notes: true
          draft: false
          prerelease: false
