name: Build Wheels

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            python-version: "3.8"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.9"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.10"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.11"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.12"
            target: x86_64-unknown-linux-gnu
          
          # macOS (Intel + Apple Silicon) - Use native target for each runner
          - os: macos-latest
            python-version: "3.8"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.9"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.10"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.11"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.12"
            target: aarch64-apple-darwin
          
          # Windows x86_64
          - os: windows-latest
            python-version: "3.8"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.9"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.10"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.11"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.12"
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust targets
        run: rustup target add ${{ matrix.target }}

      - name: Add additional targets for cross-compilation
        if: matrix.os == 'ubuntu-latest'
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Install maturin
        run: pip install maturin

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Clean target directory (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "target/wheels") { Remove-Item -Recurse -Force "target/wheels" }
        shell: pwsh

      - name: Clean target directory (Unix)
        if: runner.os != 'Windows'
        run: rm -rf target/wheels/*.whl
        shell: bash

      - name: Build wheel
        run: maturin build --release -i python --target ${{ matrix.target }}

      - name: Test wheel installation (Windows)
        if: runner.os == 'Windows'
        run: |
          $wheel = Get-ChildItem target/wheels/*.whl | Select-Object -First 1
          pip install $wheel.FullName
          python -c "import feathertail; print('Import successful')"
        shell: pwsh

      - name: Test wheel installation (Unix)
        if: runner.os != 'Windows'
        run: |
          pip install target/wheels/*.whl
          python -c "import feathertail; print('Import successful')"
        shell: bash

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.target }}
          path: target/wheels/*.whl
          retention-days: 30